#!/usr/bin/env bash

VERSION="0.1.0"
SCRIPT_NAME="$(basename "$(realpath "$0")")"

echo "* Running version v$VERSION"

# {{{ argumnent variable definitions

DEFAULT_JOBS=5
DEFAULT_LIMIT=25
DEFAULT_DIR="$PWD"

DIR=""
DEPTH=0
JOBS=-1
LIMIT=-1
OWNER=""

# }}}
# {{{ environment validation

GH_PATH="$(which gh)"
JQ_PATH="$(which jq)"

if [[ -z "$GH_PATH" ]]; then
	echo "ERR The GitHub CLI (gh) is required by was not found in the PATH."
	echo "ERR Install it and try again."
	echo ""
	echo "- For instructions, visit: https://cli.github.com"
	exit 1

  # TODO: Recommend actual install commands based on distro
fi

if [[ -z "$JQ_PATH" ]]; then
	echo "ERR The JQ utility was not found in the PATH."
	echo "ERR Install it and try again."
	echo ""
	echo "- For instructions, visit: https://stedolan.github.io/jq/download/"
	exit 1

  # TODO: Recommend actual install commands based on distro
fi

if [[ $# -eq 0 ]]; then
	echo "ERR Required argument '--owner' not provided."
  echo ""
  echo "- Consult the help output (via --help) and follow the instructions."
	exit 1
fi

# }}}
# {{{ functions

echo_usage() {
	local -r SCRIPT_NAME="$1"

	if [[ -z "$SCRIPT_NAME" ]]; then
		echo "* Script name not provided or empty."
		exit 1
	fi

	echo "* Usage $SCRIPT_NAME [...args]"
	echo ""
	echo "For a list of available arguments, and usage instructions, run:"
	echo "./$SCRIPT_NAME --help"
}

echo_description() {
	echo "  This script can be useful for quickly cloning a large number of"
	echo "  repositories from GitHub, especially for organizations with a large"
	echo "  number of repositories."
	echo ""
	echo "  It can also be used for backing up all of a user's or organization's"
	echo "  repositories to a local machine."
	echo ""
	echo "  By utilizing parallel jobs, the cloning process can be significantly"
	echo "  faster compared to cloning each echo repository one by one."
}

echo_flags() {
	echo "  === Flags ==="
	echo ""
	echo "  --help: Show this help text"
	echo ""
	echo "  --depth: The depth at which to clone the remote repository. Defaults"
	echo"            to -1, which is the full history. Any other value will limit"
	echo "           the clone to the specified number of commits."
	echo ""
	echo "  --dir:   Sets the directory where the repositories will be cloned."
	echo ""
	echo "  --owner: Sets the username or organization name to clone all"
	echo "           repositories for."
	echo "           This argument is required and must be followed by the desired"
	echo "           username or organization name."
	echo "           Only repositories owned by the specified user or organization"
	echo "           will be echo tloned."
	echo ""
	echo "  --limit: Sets the maximum number of repositories that will be cloned."
	echo "           This argument is optional and must be followed by a numerical"
	echo "           value. If not specified, all repositories owned by the"
	echo "           specified user or organization will be cloned."
	echo ""
	echo "  --jobs: Sets the number of clone processes to run in parallel."
	echo "          This argument is optional and must be followed by a numerical"
	echo "          value. If not specified, the default value of 1 will be used."
	echo "          Increasing the number of jobs can speed up the cloning process,"
	echo "          but may also put more strain on system resources."
	echo "          It is recommended to use a value that is appropriate for your"
	echo "          system's capabilities."
}

echo_examples() {
	local -r SCRIPT_NAME="$1"

	if [[ -z "$SCRIPT_NAME" ]]; then
		echo "Script name not provided or empty."
		exit 1
	fi

	echo "  === Examples ==="
	echo ""
	echo "  - To clone a maximum of 500 repositories owned by the user 'me'"
	echo "    using 16 parallel jobs into the current directory, run:"
	echo "    \$ ./$SCRIPT_NAME --owner me --jobs 16 --limit 500 --dir ."
	echo ""
	echo "  - To clone all repositories owned by the organization microsoft"
	echo "    using 20 parallel jobs and a max of 500 repositories, into the"
	echo "    directory at ./microsoft, you can run:"
	echo "    \$ ./$SCRIPT_NAME --owner microsoft --jobs 20 --limit 500 --dir ./microsoft"
}

echo_help() {
	local -r SCRIPT_NAME="$1"

	if [[ -z "$SCRIPT_NAME" ]]; then
		echo "Script name not provided or empty."
		exit 1
	fi

	echo_usage "$SCRIPT_NAME"
	echo ""
	echo ""
	echo_description
	echo ""
	echo ""
	echo_flags
	echo ""
	echo ""
	echo_examples "$SCRIPT_NAME"
}

# }}}
# {{{ parse arguments

for ((i = 1; i <= $#; i++)); do
	case ${!i} in
	--help)
		echo_help "$SCRIPT_NAME"
		exit 0
		;;
	--jobs)
		next_index=$((i + 1))
		JOBS=${!next_index}
		;;
	--limit)
		next_index=$((i + 1))
		LIMIT=${!next_index}
		;;
	--owner)
		next_index=$((i + 1))
		OWNER=${!next_index}
		;;
	--depth)
		next_index=$((i + 1))
		DEPTH=${!next_index}
		;;
	--dir)
		next_index=$((i + 1))
		DIR=${!next_index}
		;;
	esac
done

# }}}
# {{{ use default values for omitted optional argumnets

if [[ "$JOBS" -eq -1 ]]; then
	JOBS=$DEFAULT_JOBS
	echo "! Job count not specified, using default value $DEFAULT_JOBS"
fi

if [[ "$LIMIT" -eq -1 ]]; then
	LIMIT=$DEFAULT_LIMIT
	echo "! Max repo limit not specified, using default value $DEFAULT_LIMIT"
fi

if [[ -z "$DIR" ]]; then
	DIR=$DEFAULT_DIR
	echo "! Output directory not specified, using default value $DEFAULT_DIR"
fi

# }}}
# {{{ validate final argument values

echo ""

if [[ -n "$LIMIT" ]] && [[ "$LIMIT" -lt 0 ]]; then
	echo "Error: Limit must be a positive number"
	exit 1
else
  echo "* Will clone at most $LIMIT repositories."
fi

if [[ -n "$JOBS" ]] && [[ "$JOBS" -lt 0 ]]; then
	echo "Error: Number of jobs must be at least 1"
	exit 1
else
  echo "* Will clone $JOBS repositories at a time, in paralllel."
fi

if [[ -n "$DEPTH" ]] && [[ "$DEPTH" -lt 0 ]]; then
	echo "Error: Clone commit depth must be at least 1 if provided."
	exit 1
else
  if [[ -z "$DEPTH" ]]; then
    echo "* Will clone complete commit histories."
  else
    echo "* Will clone only the last $DEPTH commits."
  fi
fi

if [[ -z "$OWNER" ]]; then
	echo "Error: Owner not specified"
	exit 1
else
  echo "* Target repository author is $OWNER."
fi

if [[ ! -d "$DIR" ]]; then
	echo "Error: Output directory $DIR does not exist."
  exit 1
else
  echo "* Cloning into directory $DIR..."
fi

echo ""

# }}}

echo "* Fetching a list of at most $LIMIT repositories belonging to $OWNER..."

GH_REPOS_LIST_JSON=$(gh repo list "$OWNER" --json name --limit "$LIMIT")
mapfile -t GH_REPOS_LIST < <(echo "$GH_REPOS_LIST_JSON" | jq -r '.[].name')
GH_REPOS_LIST_COUNT=${#GH_REPOS_LIST[@]}

if [[ -z $GH_REPOS_LIST_COUNT ]]; then
  echo "Error: Found no repositories for $OWNER."
  exit 1
fi

echo "* Found $GH_REPOS_LIST_COUNT repositories."

NEW_GH_REPOS_LIST=()
SKIP_COUNT=0

for GH_REPO in "${GH_REPOS_LIST[@]}"; do
	if [[ ! -d "$DIR/$GH_REPO" ]]; then
		NEW_GH_REPOS_LIST+=("$GH_REPO")
  else
    if [[ $SKIP_COUNT -eq 0 ]]; then
      echo ""
    fi

    ((SKIP_COUNT++))

    echo "- [$SKIP_COUNT] skipped existing repository $GH_REPO."
	fi
done

if [[ $SKIP_COUNT -gt 0 ]]; then
  echo ""
fi

EXISTING_REPO_COUNT=$((${#GH_REPOS_LIST[@]} - ${#NEW_GH_REPOS_LIST[@]}))
NEW_REPO_COUNT=${#NEW_GH_REPOS_LIST[@]}

if [[ $NEW_REPO_COUNT -eq 0 ]]; then
  echo "! All repositories already present in $DIR, nothing to do."
  exit 0
fi

echo "- $NEW_REPO_COUNT new repositories will be cloned in $DIR/"
echo "- $EXISTING_REPO_COUNT existing repositories will be skipped."
echo ""

CLONE_COUNT=$SKIP_COUNT

for REPO in "${NEW_GH_REPOS_LIST[@]}"
do
  ((CLONE_COUNT++))

  if [[ $DEPTH -gt 0 ]]; then
    echo "C [$CLONE_COUNT] cloning $OWNER/$REPO (most recent $DEPTH commits)..."

    CWD=$(pwd)
    cd "$DIR" || exit 1
    gh repo clone "$OWNER"/"$REPO" -- --depth="$DEPTH" > /dev/null 2>&1
    cd "$CWD" || exit 1
  else
    echo "C [$CLONE_COUNT] cloning $OWNER/$REPO (all commits)..."

    CWD=$(pwd)
    cd "$DIR" || exit 1
    gh repo clone "$OWNER"/"$REPO" > /dev/null 2>&1
    cd "$CWD" || exit 1
  fi
done

echo ""
echo "* All '$OWNER' accont repositories have been cloned into $DIR."
